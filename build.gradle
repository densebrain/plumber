/**
 * Set all versions for compilation
 */

buildscript {

	ext {
		groovyVersion = '2.3.7'
		hibernateVersion = '4.3.7.Final'
		hibernateValidatorVersion = '5.1.3.Final'
		springVersion = '4.1.2.RELEASE'
		springSecurityVersion = '3.2.4.RELEASE'
		jerseyVersion = '2.13'
		jacksonVersion = '2.4.4'
		slf4jVersion = '1.6.4'
		springBootVersion = '1.2.0.RC2'

	}


	repositories {
		mavenLocal()
		mavenCentral()
		maven { url "http://repo.spring.io/snapshot" }
		maven { url "http://repo.spring.io/milestone" }
		maven { url "http://repo.spring.io/libs-release" }
		maven { url 'http://repos.zeroturnaround.com/nexus/content/groups/zt-public/' }


	}

	dependencies {
		classpath group: 'org.zeroturnaround', name: 'gradle-jrebel-plugin', version: '1.1.2'
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}


/**
 * Configure global repos and tasks
 *
 * Apply java/rebel, set version, etc
 */
allprojects {
	repositories {
		mavenLocal()
		mavenCentral()
		maven { url "http://repo.spring.io/milestone" }
		maven { url "http://repo.spring.io/snapshot" }
		maven { url "http://repo.spring.io/libs-release" }
	}

	apply plugin: 'groovy'
	apply plugin: 'java'
	apply plugin: 'rebel'

	group = 'org.plumber'
	version = '1.0.1'

	sourceCompatibility = 1.8
	targetCompatibility = 1.8


	buildDir = new File(projectDir, 'target')
	buildDir.mkdirs()

	dependencies {
		compile "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
		compile "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:${jacksonVersion}"

		compile "org.codehaus.groovy:groovy-all:${groovyVersion}"

		testCompile group: 'junit', name: 'junit', version: '4.11'
	}

	sourceSets {
		main {
			groovy {
				// override the default locations, rather than adding additional ones
				srcDirs = ['src/main/groovy', 'src/main/java']
			}
			java {
				srcDirs = [] // don't compile Java code twice
			}
		}
	}

}



subprojects {
	if (it.name != 'test')
        apply plugin: 'maven'

	generateRebel.mustRunAfter(classes)

	if (it.name == 'manager' || it.name == 'worker' || it.name == 'core') {
		apply plugin: 'spring-boot'

		bootRepackage {
			mainClass = 'org.plumber.core.Application'
		}

		springBoot {
			mainClass = 'org.plumber.core.Application'
		}

		install {
			repositories.mavenInstaller {
				pom.project {
					parent {
						groupId 'org.springframework.boot'
						artifactId 'spring-boot-starter-parent'
						version springBootVersion
					}
				}
			}
		}



		bootRun {
			if (project.hasProperty('jvmArgs')) {
				jvmArgs project.jvmArgs.split('\\s+')
			}
		}
	}
}

project(':client') {


	dependencies {
        compile "org.glassfish.jersey.media:jersey-media-moxy:${jerseyVersion}"
        compile "org.glassfish.jersey.media:jersey-media-json-jackson:${jerseyVersion}"
	    compile "org.glassfish.jersey.core:jersey-client:${jerseyVersion}"
	    compile group: 'com.google.code.gson', name: 'gson', version:'2.2.4'
    }
}

project(':common') {


    dependencies {
        compile project(':client')

        compile group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion
		compile 'commons-lang:commons-lang:2.2'
	    compile "org.reflections:reflections:0.9.9-RC1"
        compile group: 'org.springframework', name: 'spring-webmvc', version:springVersion

        testCompile group: 'junit', name: 'junit', version: '4.11'
    }


}

//Setup the final artifact projects
project(':core') {

	configurations {
		providedRuntime
	}

	dependencies {
		compile project(':common')
		compile "org.springframework.boot:spring-boot-starter"
		compile "org.springframework.boot:spring-boot-starter-tomcat"
		compile "org.springframework.boot:spring-boot-starter-web"

		compile("org.apache.tomcat.embed:tomcat-embed-jasper") {
			exclude group: 'javax.servlet'
		}

		compile ('org.glassfish.jersey.ext:jersey-spring3') {
			exclude module: 'spring-web'
			exclude group: 'javax.validation'
		}

		providedRuntime("org.springframework.boot:spring-boot-starter-tomcat")
		testCompile "org.springframework.boot:spring-boot-starter-test"

	}
}

project(':worker') {
	apply plugin: 'war'

	dependencies {
		compile project(':core')
	}

}

project(':manager') {
	apply plugin: 'war'

	dependencies {
        compile project(':worker')
    }
}


project(':test') {
	dependencies {
		compile project(':common')
	}
}

def installableProjects = subprojects.findAll {
	it.name != 'test'
}

task install {
	mustRunAfter(project(':manager').classes)

	println(installableProjects)
	dependsOn installableProjects.install
}
